PROBLEM - 01 ----------->>

Several Temparature ranges are given( li , ri) of recipies. A Temparature is admissible if atleast k recipies recommend it. Further given Q 
queries of temp. range, find out how many Temparature are admissible within the temp. range..


PROBLEM - 02 ---------->>

Q.s => Each arr[i][j] is the sum of all elements mat[r][c] for: i - k <= r <= i + k, j - k <= c <= j + k . (k is given)

--> Observation -> Each arr[i][j] have (a,b) & (c,d) jinko hum Query consider krke 2D - Prefix with Query ka logic laga sakte hai

TASK -> How you will generate the valid (a,b) & (c,d) for each arr[i][j] ? 
HINT -> a = max(i-k,0) , b = max(j-k,0) , c = min(r-1, i+k) 



PROBLEM - 03 ---------->>

Q.s -> An array is Given and list of m operation are given. Each operation look like (li,ri,di) i.e add di to arr[li] to arr[ri] .. 
       Now You are given K queries. In each Query(xi,yi), Apko xi se yi index tk ka operation lgana hai operation wali list se array me. 
       Output the final Array .. Constraint -> 1 <= n,m,k <= 1e5  ,,  1 <= xi <= yi <= n

NOTE -> Yha pe apko " Query on Array of Queries " krna hai .. Constraint are TIGHT, Pakka TLE denga, how to do it ???

HINT -> Difference array to get the occurence of Each Query(operation) from the m sized list of operation.
     -> Make the Difference array that will store the Contribution of Each operation. Add this Contribution to the Original Array ..


FLOW --> K queries se M list queries ka occurence and then calculating the Contri of each of the m query . Adding to the Final one ..



PROBLEM - 04 ----------->>

Q.s -> Rearrange the Array elements to maximize the total sum of the K queries. In each query(l,r) , take sum of a[l] to a[r]..
       Also Print the Rearranged Array..
--> Maximum wale elements array ka most occured index pe rhna chahiye 

HINT --> Difference Array can be used
HINT2 --> Inorder to make the Rearrange array, You can use the array of pairs with {occ, indx}



PROBLEM - 05 ---------------->>

Q.s -> 2D Binary Matrix is given .. K queries are given with (a,b) and (c,d). In one query, You can flip all the bits from topmost (a,b) to
       (c,d) bottom-most. Print the Updated Matrix ...

NOTE => Agar Each cell kitne baar occured hua query me pta chal jaaye to we can guess the final value of that cell , HOW ??

HINT -> Use 2D Difference Array for occurence part



PROBLEM - 06 ------------------>>>

Q.s -> Two arrays are given arr, brr of n, m size respectively. Add a1 a2 .... am by b1 b2 ... bm , then a2 a3 ..... am+1 with b1 b2 .... bm and
       so on Till the arr[i] till the window addition of m size is possible i.e arr[n-m+1] . C is given.. All values in arr, brr lies in range 0 
       to c-1 i.e modulo of c . Output the Final Array..

NOTE -> Sliding Window use nhi kar sakte becz Sliding Window can be used only when you can use past window result for making the new window ...

HINT -> Q.s is concerned with Total SUM at each index of arr .. So In Sliding Window, Each index of the Window contribute to a specific range of 
       indexes of main array .. So hum brr ke each element ka track rakh sakte hai i.e usne arr ke konse index pe contribute kiya ...
        Ex => b1 -> 0 to n-m tk hi aayenga arr ke har index me ... b2 -> 1 to n-m+1 tk and so on upto bm -> m-1 to n-m+(m-1)

==> Difference Array can be used



PROBLEM - 07 ------------------>>>

Q.s -> Array is Given. K Query is given in the form [l,r] . In each Query, Add (i - l + 1) to each l <= i <= r .. 
       1 <= N, K <= 1e6

NOTE -> Here We have a Different variation of Query --> From l to r , we have to add the Numbers Progressively increasing by 1 ...
        For Example --> l = 1 , r = 4, then 1, 2, 3, 4  addition to this range

HINT -> [0,0,0,0,0,0] , l = 0, r = 2 -> [1,2,3,0,0,0] => How to make this Effect ??
       Here we will add numbers at r + 1, and r + 2 to nullify the Range -->
       [1, 0, 0, -4, 3, 0]  

       PREFIX SUM ---> [1, 1, 1, -3, 0, 0]  

       Again PREFIX SUM ---> [1, 2, 3, 0, 0, 0]    ==> The Required Query Effect

        